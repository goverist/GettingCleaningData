Ademo()
demo(graphics)
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.1.1/library")
install.packages("KernSmooth")
install.packages("swirl")
library("siwrl")
library("swirl")
swirl()
5+7
x<-5 + 7
x
y<-x-3
y
bye()
getwd
getwd()
q()
swirl()
library("swirl", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("swirl")
swirl()
install.packages("swirl")
library("swirl", lib.loc="C:/Program Files/R/R-3.1.1/library")
swirl()
getwd()
ls()
x<-9
play()
ls()
nxt()
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create(getwd()&testdir)
dir.create(C:/Users/JMGO/Documents/testdir)
setwd(testdir)
dir.create(C:\\Users\\JMGO\\Documents\\testdir)
dir.create(\\testdir)
args(dir.create)
dire.create("testdir")
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
args(list.files)
file.exists("mytest.R")
file.info("mytest.R")
file.rename(mytest.R, mytest2.R)
file.rename("mytest.R, "mytest2.R)
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
path("mytest3.R")
file.path("mytest3.R")
dir.create("testdir2/testdir3")
dir.create("testdir2/testdir3", recursive = TRUE)
dir.remove("testdir2")
remove("testdir2")
unlink("testdir2", recursive =TRUE)
setwd(old.dir)
unlink("testdir", recursive =TRUE)
library("swirl")
ls()
rm(list=ls())
swirl()
1:20
pi:10
15:1
info()
main()
skip()
skip()
skip()
skip()
skip()
skip()
skip89
skip()
skip()
skip()
skip()
skip()
c(0.5, 55, -10, 6)
num_vect <- c(0.55, 55, -10, 6)
c(0.55, 55, -10, 6) <- num_vect
?c
c(0.55, 55, -10, 6) <- num_vect
num_vect <- c(0.55, 55, -10, 6)
info()
num_vect <- c(0.55, 55, -10, 6) as.vector
num_vect <- c(0.55, 55, -10, 6)
num_vect(0,55, 55, -10, 6)
c(0,55, 55, -10, 6)
?c
num_vect <- c(0.55, 55, -10, 6, recursive = TRUE)
num_vect <- c(0.55, 55, -10, 6)
num_vect<-c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char<-("My", "name", "is")
my_char<-c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name(my_char, "JOSE")
my:name<-c(my_char, "JOSE")
my_name<-c(my_char, "JOSE")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <. sample(c(y, z), 100)
my_data <- sample(c(y, z), 100)
my_na(is.na(my_data))
my_na <- (is.na(my_data))
swirl()
library("swirl")
swirl()
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
inf-inf
Inf - Inf
x
x[1:10]
x[is,na(x)]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
play()
getwd()
getwd()
library("swirl")
swirl()
info()
main()
x
z[1:10]
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x & x>0)]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical( vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
swirl()
library("swirl")
swirl()
my_vector <-c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length()
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", Sean)
patients <- c("Bill", "Gina", "Kelly", "Sean"")
patients <- c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)<- cnames
my_data
info
info()
bye()
makevector <- function(x = numeric()) {
m <- null
print(environment())
evn <- enviroment()
print(parent.env(evn))
set <-function(y){
x <<- y
m<<-NULL
}
get <-function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
getevn <- function() environment()
list(set = set, get = get, setmean = seatmean, getevn = getevn)
}
x <- 1:10000
vec <-makevector(x)
traceback()
makevector <- function(x = numeric()) {
m <- NULL
print(environment())
evn <- enviroment()
print(parent.env(evn))
set <-function(y){
x <<- y
m<<-NULL
}
get <-function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
getevn <- function() environment()
list(set = set, get = get, setmean = seatmean, getevn = getevn)
}
vec <- makevector(x)
source('C:/Users/JMGO/R/makevector.R')
vec <- makevector(x)
?function
?function
x
set
?function
help(function)
?function
library(datasets)
data(iris)
?iris
m <- mean(iris$Sepal.Length)
m
colMeans(iris)
rowMeans(iris[,1:4])
apply(iris[,1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
data(mtcars)
?mtcars
coplot(mpg ~ disp) | as.factor(cycl), data=mtcars, panel =panel.smooth, rows=1
coplot(mpg ~ disp) | as.factor(cycl), data=mtcars, panel =panel.smooth, rows=1)
coplot(mpg ~ disp | as.factor(cycl), data=mtcars, panel =panel.smooth, rows=1)
coplot(mpg ~ disp | as.factor(cyl), data=mtcars, panel =panel.smooth, rows=1)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
?mtcars
meanbycyl <- with(mtcars, tapply(mpg, cyl, mean))
abs <- meanbycyl$4 - meanbycyl$8
abs4 <- meanbycyl$4
abs4 <- meanbycyl[1]
abs 8 <- meanbycyl[3]
abs8 <- meanbycyl[3]
dif <- abs4 - abs8
dif
data(iris)
iris
DataVirginica <- iris[Species = virginica]
DataVirginica <- iris[Species = "virginica"]
subset?
?subset
Datavirginica <- subset(iris, Species ="virginica")
Datavirginica
Datavirginica <- subset(iris, Species == "virginica")
Datavirginica
mean[iris$Sepal.length]
mean(iris$Sepal.length)
mean(Datavirginica$Sepal.length)
m <- mean(Datavirginica$Sepal.length)
m <- mean(Datavirginica$[1])
m <- mean(Datavirginica[1])
rowMeans(iris[, 1:4])
apply[Datavirginica[,1:4], 2, mean]
class(Datavirginica)
Datavirginica
mean(iris[[Sepal.Length]])
mean(iris$Sepal.Length)
mean(Datavirginica$Sepal.Length)
data(mtcars)
mtcars
?tapply
split
?split
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
sapply(mtcars, cyl, mean)
unsplit
unsplit(mtcars, mtcars$cyl)
mtcars
sapply(mtacrs, cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
?tapply
mydata <- tapply(mtcars$hp, mtcars$cyl, mean)
mydata
hp8 <- mydata[3]
hp8
hp4 <- mydata[1]
hp4
result <- hp8 - hp4
result
x <- 1:10000
vec <- makevector(x)
source('C:/Users/JMGO/R/makevector.R')
vec <- makevector(x)
vec$getmean
mx <- mean(x)
vec$setmean(mx)
vec$getmean(x)
vec$getmean()
mean
vec$getmean()
source('C:/Users/JMGO/R/makevector.R')
x <- 1:10000
vec <- makevector(x)
vec$getmean()
mx <- mean(x)
vec$setmean(mx)
vec$getmean()
vec
vec$getevn()
ls(vec$getevn())
install.packages("XML")
library(XML)
fileurl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileurl, useInternal = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
listZips <-xpathApply(rootNode,"//zipcode", xmlValue)
sum(listzips[=21231])
sum(listzips[21231])
sum(listZips[21231])
sum(listZips == 21231)
library("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package =="swirl")
filter(cran, r_version =="3.1.1", country =="US")
?Comparison
filter(cran, r_version <="3.1.1", country =="IN")
filter(cran, r_version <="3.0.2", country =="IN")
filter(cran, country =="IN" | country =="US")
filter(cran, size > 100500 & r_os =="linux-gnu")
filter(cran, size > 100500, r_os =="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, packate, ip_id)
arrange(cran2, package, ip_id)
arrange(cran2, country, dec(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran 3<- select(cran, ip_id, package, size)
cran3<- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/ 2^20)
mutate(cran3, size_mb = size/ 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
?setwd
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
setwd("c:/Users/JMGO/Documents/Github/GettingCleaningData/Quizz3Question1")
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
head(DataQ3)
library("dplyr", lib.loc="C:/Program Files/R/R-3.1.1/library")
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
library("plyr", lib.loc="C:/Program Files/R/R-3.1.1/library")
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
head(numbers)
?head
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
View(numbers)
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
source('~/GitHub/GettingCleaningData/GettCleanData Quiz3Question1.R')
View(numbers)
